#!/bin/bash

#  dvbondemand
#
#  Gets audio/video services from several dvb cards.
#  Starts mumudvb servers on client's request.
#  Stops these servers when idle.
#
#  dvbondemand detects when a service is required and therefore
#  starts mumudvb sessions using an available dvb adapter.
#  In few seconds clients will get the corresponding http video/audio stream.
#  Also, ends the mumudvb server session after client disconnection.
#
#  $Revision: 1.6 $
#
#  Copyright (C) 2023-2023 Jordi Pujol <jordipujolp AT gmail DOT com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3, or (at your option)
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#************************************************************************

_trim() {
	printf '%s\n' "${@}" | \
	sed -re "/^[[:blank:]]+|[[:blank:]]+$/s///g"
}

_ps_children() {
	local ppid=${1:-${$}} \
		excl="${2:-"0"}" \
		pid
	for pid in $(pgrep -P ${ppid} | \
	grep -svwEe "${excl}"); do
		_ps_children ${pid} "${excl}"
		pidsChildren="${pidsChildren}${pid}${TAB}"
	done
}

_UTCseconds() {
	date +'%s' "${@}"
}

_datetime() {
	date +'%F %T' "${@}"
}

_applog() {
	local msg="${@}"
	printf '%s\n' "$(_datetime) ${msg}" >> "${LOG}"
}

PreBackupRotate() {
	local f d=$(_UTCseconds)
	for f in "${LOG}" "${LOG}.xtrace"; do
		[ ! -f "${f}" ] || \
			mv -f "${f}" "${f}_${d}"
	done
}

BackupRotate() {
	local f t
	find . -maxdepth 1 \
	-name "${LOG}_*" | \
	sort | \
	head -qn -${LogRotate} | \
	while IFS="_" read -r f t; do
		rm -f "${LOG}_${t}" "${LOG}.xtrace_${t}"
	done
}

RuleInsert() {
	local portHttp="${1}" \
		config conffile
	[ -z "$(ss --no-header --numeric --tcp state all sport ${portHttp} | \
	grep -svF 'TIME-WAIT')" ] || \
		[ -z "${Debug}" ] || \
			_applog "Warn: will set watch on port ${portHttp}" \
				"when server is already active"
	iptables -4 --wait -I INPUT -p tcp -m tcp \
		--dport ${portHttp} -m state --state NEW \
		-m limit --limit 20/min \
		-j LOG --log-level info --log-prefix "${NEWREQUEST}${portHttp}"
	let "config=portHttp-PortHttp,1"
	eval conffile=\"\${config${config}_conffile:-}\"
	_applog "Info: watching port ${portHttp} for \"${conffile}\""
}

RuleClean() {
	local portHttp="${1:-}" \
		rule n d="y"
	until [ -z "${d}" ]; do
		d=""
		n=1
		while rule="$(iptables -4 --wait --list INPUT ${n})" && \
		[ -n "${rule}" ]; do
			if grep -qs \
			-e "LOG level info prefix \"${NEWREQUEST}${portHttp:-".*"}\"" \
			<<< "${rule}"; then
				iptables -4 --wait --delete INPUT ${n}
				_applog "Info: removing watch on port ${portHttp}"
				d="y"
			else
				let "n++,1"
			fi
		done
	done
}

ListStatus() {
	set | awk \
		'/^(adapter|config)[[:digit:]]*_/ {print}
		/^(Debug|PortHttp|LogRotate|IdleTimeout|Blacklist|Servers)/ {print}' \
		> "${STAT}"
}

LoadConfig() {
	local config service name data conffile line ind \
		card tuner services \
		msg="Loading configuration"

	mkdir -p -m 0755 "/run/mumudvb"
	chown -R _mumudvb:video "/run/mumudvb"

	ReloadConfig="y"
	# config variables, default values
	Workdir="/run/${NAME}/"
	Debug=""
	PortHttp=4000
	LogRotate=3
	IdleTimeout=20
	Blacklist=""

	[ ! -s "/etc/default/${NAME}" ] || \
		. "/etc/default/${NAME}"

	[ "${Workdir: -1}" = '/' ] || \
		Workdir="${Workdir}/"
	mkdir -p "${Workdir}"
	cd "${Workdir}"
	rm -f *.{conf,m3u} {0..9}* "${STAT}" 2> /dev/null
	[ -e "${PIPE}" ] || \
		mkfifo "${PIPE}"

	UpdateReport="y"
	Msgs=""
	MsgsInfo=""
	Adapters=${NONE}
	Configs=${NONE}
	PreBackupRotate
	exec >> "${LOG}" 2>&1
	_applog "${msg}"

	! printf '%s\n' "${@}" | grep -qsxiF 'debug' || \
		Debug="y"
	! printf '%s\n' "${@}" | grep -qsxiF 'xtrace' || \
		Debug="xtrace"
	set +o xtrace
	if [ "${Debug}" = "xtrace" ]; then
		export PS4='+\t ${LINENO}:${FUNCNAME:+"${FUNCNAME}:"} '
		exec {BASH_XTRACEFD}>> "${LOG}.xtrace"
		set -o xtrace
	fi

	BackupRotate
	RuleClean

	unset $(set | awk -F '=' \
		'$1 ~ /^(adapter|config)[[:digit:]]*_/ {print $1}') 2> /dev/null || :
	ind=0
	while read -r line; do
		case "${ind}" in
		0)
			data="$(sed -nr \
			-e '/Info:[ ]+DVB:[ =]+Card ([[:digit:]]+) - Tuner ([[:digit:]]+) [=]+/{
			s//\1 \2/;p;q}' \
			-e '${q1}' <<< "${line}")" && \
			! grep -qswF "${data/ /:}" <<< "${Blacklist}" || \
				continue
			let "adapter=Adapters+1,1"
			card=${data%% *}
			tuner=${data##* }
			eval adapter${adapter}_card='${card}'
			eval adapter${adapter}_tuner='${tuner}'
			[ ${tuner} -eq 0 ] || \
				for item in demux dvr net; do
					[ -e "/dev/dvb/adapter${card}/${item}${tuner}" ] || \
						ln -s "${item}0" "/dev/dvb/adapter${card}/${item}${tuner}"
				done
			let "ind++,1"
			;;
		1)
			if data="$(sed -nr \
			-e '/Info:  DVB:   Frontend : ([[:alnum:]]+)/{s//\1/;p;q}' \
			-e '${q1}' <<< "${line}")"; then
				eval adapter${adapter}_name='$(_trim "${data}")'
				let "ind++,1"
			else
				ind=0
			fi
			;;
		2)
			if data="$(sed -nr \
			-e '/Info:  DVB:[[:blank:]]+([^[:blank:]].*)/{s//\1/;p;q}' \
			-e '${q1}' <<< "${line}")"; then
				case "$(_trim "${data}")" in
				Terrestrial*) data="dvbt" ;;
				Satellite*) data="dvbs" ;;
				Cable*) data="dvbc" ;;
				ATSC*) data="atsc" ;;
				*) ind=0; continue ;;
				esac
				eval adapter${adapter}_dvbtype='${data}'
				let "ind++,1"
			else
				ind=0
			fi
			;;
		3)
			if data="$(sed -nr \
			-e '/Info:  DVB:   Frequency: ([[:digit:]]+) kHz to ([[:digit:]]+) kHz/{s//\1 \2/;p;q}' \
			-e '${q1}' <<< "${line}")"; then
				eval adapter${adapter}_freqmin='${data%% *}'
				eval adapter${adapter}_freqmax='${data##* }'
				let "Adapters++,1"
			fi
			ind=0
			;;
		esac
	done < <(/usr/bin/mumudvb --list-cards 2>&1)

	while read -r conffile; do
		let "Configs++,1"
		eval config${Configs}_conffile='${conffile}'
		eval config${Configs}_dvbtype='$(basename "${conffile}" | \
			cut -f 1 -s -d '_')'

		name=""
		service_id=""
		while read -r line; do
			case "${line}" in
			freq=*) eval config${Configs}_freq='${line##*=}' ;;
			name=*) name="${line##*=}" ;;
			service_id=*) service_id="${line##*=}" ;;
			*)
				[ -n "${name}" -a -n "${service_id}" ] || \
					continue
				eval config${Configs}_service_${service_id}='${name}'
				name=""
				service_id=""
				;;
			esac
		done < "${conffile}"
		[ -z "${name}" -o -z "${service_id}" ] || \
			eval config${Configs}_service_${service_id}='${name}'
	done < <(ls -1 /etc/mumudvb/{dvbt,dvbc,dvbs,atsc}_*.conf 2> /dev/null)

	for config in $(seq ${Configs}); do
		RuleInsert $((PortHttp+config))
	done

#	{ printf '%s\n' "#EXTM3U"
#	for config in $(seq ${Configs}); do
#		let "portHttp=PortHttp+config,1"
#		eval dvbtype=\"\${config${config}_dvbtype:-}\"
#		services="$(set | \
#		sed -nre "/^config${config}_service_([[:digit:]]+)=(.*)/s//\1 \2/p")"
#		while read service name; do
#			printf '%s:%s,%s %s\n' \
#				"#EXTINF" "${service}" \
#				"${dvbtype}" "${name}"
#			printf '%s\n' \
#				"http://$(hostname):${portHttp}/bysid/${service}"
#		done <<< "${services:-"service ${portHttp}"}"
#	done
#	} > "${PLAYLIST}"

	ListStatus

	ReloadConfig=""
}

StartServer() {
	# global config
	local portHttp="${1}" \
		card="${2}" \
		tuner="${3}" \
		conffile tmpconffile filename_pid log_file playlist \
		c pid timeout

	RuleClean ${portHttp}
	eval conffile=\"\${config${config}_conffile:-}\"
	tmpconffile="${portHttp}-$(basename "${conffile}")"
	filename_pid="${Workdir}${portHttp}.pid"
	log_file="${Workdir}$(basename "${tmpconffile}" ".conf").log"
	: > "${filename_pid}"
	: > "${log_file}"
	chmod a+rw "${filename_pid}" "${log_file}"
	sed -re "/^port_http=.*/s//port_http=${portHttp}/" \
		-e "/^card=.*/s//card=${card}/" \
		-e "/^tuner=.*/s//tuner=${tuner}/" \
		-e "/^timeout_no_diff=.*/s//timeout_no_diff=${IdleTimeout}/" \
		-e "/^filename_pid=.*/s||filename_pid=${filename_pid}|" \
		-e "/^log_file=.*/s||log_file=${log_file}|" \
		< "${conffile}" > "${tmpconffile}"
	grep -qse "^timeout_no_diff=" < "${tmpconffile}" || \
		sed -i -e "1itimeout_no_diff=${IdleTimeout}" "${tmpconffile}"
	grep -qse "^filename_pid=" < "${tmpconffile}" || \
		sed -i -e "1ifilename_pid=${filename_pid}" "${tmpconffile}"
	grep -qse "^log_file=" < "${tmpconffile}" || \
		sed -i -e "1ilog_file=${log_file}" "${tmpconffile}"

	/usr/bin/mumudvb ${Debug:+"-v"} -c "${tmpconffile}"
	_applog "Info: starting mumudvb server ${portHttp}:${card}:${tuner}"
	pid=""
	let "timeout=(IdleTimeout/2+1)*2,c=timeout,1"
	while ps -e -o args --no-headers -p $(pidof /usr/bin/mumudvb | tr -s ' ' ',') | \
	grep -qsF "${tmpconffile}" && \
	pid="$(cat "${filename_pid}" 2> /dev/null)" && \
	[ -z "${pid}" ] && \
	let "c-=2"; do
		sleep 2
	done
	if [ -n "${pid}" ]; then
		[ -z "${Debug}" ] || \
			_applog "Info: mumudvb server ${portHttp}:${card}:${tuner} is running"
		#playlist="$(basename "${tmpconffile}" ".conf")-playlist.m3u"
		#rm -f "${playlist}"
		c=${timeout}
		while kill -s 0 ${pid} 2> /dev/null && \
		let "c-=2"; do
			sleep 2
			#[ -e "${playlist}" ] || \
			#	wget --quiet -O "${playlist}" \
			#	"http://$(hostname):${portHttp}/playlist.m3u" || :
			[ -z "$(ss --no-header --numeric --tcp \
			state connected sport ${portHttp} | \
			grep -svF 'TIME-WAIT')" ] || \
				c=${timeout}
		done
		if kill -s 0 ${pid} 2> /dev/null; then
			_applog "Info: mumudvb server ${portHttp}:${card}:${tuner} is idle. Stopping it"
			kill -s TERM ${pid} 2> /dev/null || :
		else
			_applog "Info: mumudvb server ${portHttp}:${card}:${tuner} has stopped himself"
		fi
	else
		_applog "Err: mumudvb server ${portHttp}:${card}:${tuner} doesn't run"
	fi
	sleep 2
	rm -f "${filename_pid}"
	RuleInsert ${portHttp}
	echo "${SERVEREND}${portHttp}" >> "${PIPE}"
}

GetAdapter() {
	# global portHttp card tuner
	local config="${1}" \
		dvbtype freq freqmax freqmin pid adapter
	eval dvbtype=\"\${config${config}_dvbtype:-}\"
	eval freq=\"\${config${config}_freq:-}\"
	while read -r adapter; do
		eval card=\"\${adapter${adapter}_card:-}\"
		eval tuner=\"\${adapter${adapter}_tuner:-}\"
		if grep -qsF ":${card}:${tuner} " <<< "${Servers}" || \
		pid="$(lsof -wt \
		"$(readlink -f "/dev/dvb/adapter${card}/demux${tuner}")")"; then
			[ -z "${Debug}" ] || \
				_applog "Info: ${portHttp} can't use" \
					"adapter${card}/frontend${tuner}"
			continue
		fi
		eval freqmin=\"\${adapter${adapter}_freqmin:-}\"
		eval freqmax=\"\${adapter${adapter}_freqmax:-}\"
		[ ${freqmin} -gt ${freq} -o  ${freq} -gt ${freqmax} ] || {
			_applog "Info: ${portHttp} selects" \
				"adapter${card}/frontend${tuner}"
			return ${OK}
		}
		[ -z "${Debug}" ] || \
			_applog "Info: ${portHttp} frequency ${freq} out of range" \
				"adapter${card}/frontend${tuner}"
	done < <(set | \
	sed -nre "/^adapter([[:digit:]]+)_dvbtype=${dvbtype}/s//\1/p")

	_applog "Warn: ${portHttp} all cards are in use"
	return ${ERR}
}

_exit() {
	trap - EXIT INT
	set +o errexit +o nounset -o pipefail +o noglob
	_applog "Daemon exit"
	printf '%s\n\n' "Daemon exit" >&2
	RuleClean
	pidsChildren="$(cat *.pid 2> /dev/null)"; _ps_children
	[ -z "${pidsChildren}" ] || \
		kill -s TERM ${pidsChildren} 2> /dev/null || :
	wait || :
}

Main() {
	# constants
	readonly NAME APPNAME="${NAME}" \
		STAT="status.txt" \
		PIPE="pipe" \
		LOG="log.txt" \
		PLAYLIST="playlist.m3u" \
		IRELOAD="HUP" ISTAT="USR2" \
		OK=0 ERR=1 TAB=$'\t' NONE=0 \
		NEWREQUEST="${NAME}New:" \
		SERVEREND="ServerEnd:" \
		RELOAD="ReloadConfig"
	# config variables
	local Debug PortHttp LogRotate IdleTimeout Blacklist
	# internal variables, daemon scope
	local ReloadConfig Adapters Configs Servers="" \
		line portHttp card tuner

	trap '_exit' EXIT
	trap 'exit' INT

	LoadConfig || \
		exit 1

	trap '[ -n "${ReloadConfig}" ] || echo "${RELOAD}" >> "${PIPE}"' "${IRELOAD}"
	trap 'echo "ListStatus" >> "${PIPE}"' "${ISTAT}"

	( journalctl --since="@$(_UTCseconds)" \
		--follow "--grep=${NEWREQUEST}" --output=cat | \
		cat - > "${PIPE}" ) &

	while :; do
		if read -r line < "${PIPE}"; then
			if portHttp="$(sed -nr \
			-e "/.*${NEWREQUEST}.*DPT=([[:digit:]]+)[^[:digit:]].*/{s//\1/;p;q}" \
			-e '${q1}' <<< "${line}")"; then
				if awk -v portHttp="${portHttp}" \
				'BEGIN{RS=" "; FS=":"}
				$1 == portHttp {rc=-1; exit}
				END{exit rc+1}' <<< "${Servers}" || \
				[ -n "$(ss --no-header --numeric --tcp state all \
				sport ${portHttp} | \
				grep -svF 'TIME-WAIT')" ]; then
					_applog "Warn: new request for already active server ${portHttp}"
				else
					let "config=portHttp-PortHttp,1"
					if GetAdapter ${config}; then
						Servers="${Servers}${portHttp}:${card}:${tuner} "
						StartServer ${portHttp} ${card} ${tuner} &
						ListStatus
					else
						_applog "Warn: another adapter not available for ${portHttp}"
					fi
				fi
			elif portHttp="$(sed -nr \
			-e "/^${SERVEREND}([[:digit:]]+)$/{s//\1/;p;q}" \
			-e '${q1}' <<< "${line}")"; then
				Servers="$(awk -v portHttp="${portHttp}" \
					'BEGIN{RS=" "; FS=":"}
					$1 != portHttp {printf $0 " "}' <<< "${Servers}")"
				ListStatus
			elif [ "${line}" = "${RELOAD}" ]; then
				[ -n "${Servers}" ] && \
					_applog "Warn: can't reload config while" \
						"servers ${Servers}are active" || \
					LoadConfig
			elif [ "${line}" = "ListStatus" ]; then
				ListStatus
			else
				[ -z "${Debug}" ] || \
					_applog "Warn: received invalid data from pipe" \
						"${line}"
			fi
		else
			_applog "Warn: can't read from pipe"
		fi
	done
}

set -o errexit -o nounset -o pipefail +o noglob +o noclobber

NAME="$(basename "${0}")"

case "${1:-}" in
start)
	shift
	Main "${@}"
	;;
*)
	echo "Wrong arguments" >&2
	exit 1
	;;
esac
