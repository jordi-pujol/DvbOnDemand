#!/bin/bash

#  dvbondemand
#
#  Gets audio/video services from several dvb cards.
#  Starts mumudvb servers on client's request.
#  Stops these servers when idle.
#
#  dvbondemand detects when a service is required and therefore
#  starts mumudvb sessions using an available dvb adapter.
#  In few seconds clients will get the corresponding http video/audio stream.
#  Also, ends the mumudvb server session after client disconnection.
#
#  $Revision: 1.24 $
#
#  Copyright (C) 2023-2023 Jordi Pujol <jordipujolp AT gmail DOT com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3, or (at your option)
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#************************************************************************

set -o errexit -o nounset -o pipefail +o noglob +o noclobber
shopt -s extglob

_trim() {
	printf '%s\n' "${@}" | \
	sed -re "/^[[:blank:]]+|[[:blank:]]+$/s///g"
}

_lsof() {
	local f="${1}" \
		inum
	inum="$(ls -i "$(readlink -f "${f}")" 2>> "${devNull}" )" && \
	( find /proc/+([0-9])/fd -follow -inum ${inum%% *} 2>> "${devNull}" || : ) | \
		cut -f 3 -s -d '/' | \
		sort -n -u | \
		grep -sxvF "1"
}

_ps_children() {
	local ppid=${1:-${$}} \
		excl="${2:-"0"}" \
		pid
	for pid in $(pgrep -P ${ppid} | \
	grep -svwEe "${excl}"); do
		_ps_children ${pid} "${excl}"
		printf '%d\t' ${pid}
	done
}

_UTCseconds() {
	date +'%s' "${@}"
}

_datetime() {
	date +'%F %T' "${@}"
}

_msg() {
	msg="${@}"
}

_applog() {
	local msg="${@}"
	printf '%s\n' "$(_datetime) ${msg}" >> "${LOG}"
}

CreateEmptyPipe() {
	local pipe="${1}"
	rm -f "${pipe}"
	mkfifo "${pipe}"
	chmod a+rw "${pipe}"
}

PreBackupRotate() {
	local f d=$(_UTCseconds)
	for f in "${LOG}" "${LOG}.xtrace"; do
		[ ! -f "${f}" ] || \
			mv -f "${f}" "${f}_${d}"
	done
}

BackupRotate() {
	local f t
	find . -maxdepth 1 \
	-name "${LOG}_*" | \
	sort | \
	head -qn -${LogRotate} | \
	while IFS="_" read -r f t; do
		rm -f "${LOG}_${t}" "${LOG}.xtrace_${t}"
	done
}

Traffic() {
	local portHttp=${1}
	ss --no-header --numeric --tcp state established sport ${portHttp} | \
		awk '{print $NF; rc=-1}
		END{exit rc+1}' | \
		sort
}

RuleInsert() {
	local portHttp="${1}" \
		config conffile
	[ -z "${Debug}" ] || \
		! Traffic ${portHttp} >> "${devNull}" || \
			_applog "Warn: will set watch on port ${portHttp}" \
				"when server is already active"
	iptables -4 --wait -I INPUT -p tcp \
		-m tcp --dport ${portHttp} \
		-m state --state NEW \
		-m limit --limit 20/min \
		-j LOG --log-level info --log-prefix "${NEWREQUEST}"
	let "config=portHttp-PortHttp,1"
	eval conffile=\"\${config${config}_conffile:-}\"
	_applog "Info: watching port ${portHttp} for \"${conffile}\""
}

RuleClean() {
	local portHttp="${1:-}" \
		prefix="${2:-"${NEWREQUEST}"}" \
		rule n port d="y"
	port="${portHttp}"
	until [ -z "${d}" ]; do
		d=""
		n=1
		while rule="$(iptables -4 --wait --numeric --list INPUT ${n})" && \
		[ -n "${rule}" ]; do
			if grep -qse \
			"LOG.*tcp dpt:${portHttp:-".*"} .*prefix \"${prefix}\"" \
			<<< "${rule}"; then
				iptables -4 --wait --delete INPUT ${n}
				[ -n "${portHttp}" ] || \
					port="$(sed -nre "/.*tcp dpt:([[:digit:]]+) .*/s//\1/p" \
						<<< "${rule}")"
				_applog "Info: removing watch \"${prefix}\" on port ${port}"
				d="y"
			else
				let "n++,1"
			fi
		done
	done
}

RuleInsertClient() {
	local portHttp="${1}"
	iptables -4 --wait -I INPUT -p tcp \
		-m tcp --dport ${portHttp} \
		--tcp-flags FIN FIN \
		-j LOG --log-level info --log-prefix "${CLIENTCONNECT}${portHttp}"
	iptables -4 --wait -I INPUT -p tcp \
		-m tcp --dport ${portHttp} \
		--tcp-flags RST RST \
		-j LOG --log-level info --log-prefix "${CLIENTCONNECT}${portHttp}"
	iptables -4 --wait -I INPUT -p tcp \
		-m tcp --dport ${portHttp} \
		-m state --state NEW \
		-j LOG --log-level info --log-prefix "${CLIENTCONNECT}${portHttp}"
	[ -z "${Debug}" ] || \
		_applog "Info: watch client connection port ${portHttp}"
}

Hostnames() {
	local host name s=""
	for host in "${@}"; do
		if name="$(getent hosts "${host%%:*}")"; then
			name="${name##* }"
			name="${name//.$(hostname -d)}"
			[ -z "$(cut -f 2 -s -d ':' <<< "${host}")" ] || \
				name="${name}:${host##*:}"
		else
			name="${host}"
		fi
		printf '%s%s' "${s}" "${name}"
		s=" "
	done
}

ListStatus() {
	exec > "${STAT}"
	set | sed -nre "/\(\)[[:blank:]]*$/d" \
		-e '/^[[:upper:]][[:lower:]]/p'
	for adapter in $(seq ${Adapters}); do
		echo
		set | sed -n -e "/^adapter${adapter}_/p"
	done
	for config in $(seq ${Configs}); do
		echo
		set | sed -n -e "/^config${config}_/p"
	done
}

LoadConfig() {
	local name data conffile line ind \
		card tuner dvbtype item service_id adapterTypes \
		msg="Loading configuration"

	mkdir -p -m 0755 "/run/mumudvb"
	chown -R _mumudvb:video "/run/mumudvb"

	reloadConfig="y"
	# config variables, default values
	Workdir="/run/${NAME}/"
	Debug=""
	PortHttp=4000
	LogRotate=3
	IdleTimeout=60
	Blacklist=""

	[ ! -s "/etc/default/${NAME}" ] || \
		. "/etc/default/${NAME}"

	let "IdleTimeout+=IdleTimeout%2,1"
	[ "${Workdir: -1}" = '/' ] || \
		Workdir="${Workdir}/"
	mkdir -p "${Workdir}"
	cd "${Workdir}"
	rm -f *.{conf,m3u,log} {0..9}* "${STAT}" 2> /dev/null
	CreateEmptyPipe "${PIPE}"

	adapterTypes=""
	Adapters=${NONE}
	Configs=${NONE}
	PreBackupRotate
	exec >> "${LOG}" 2>&1
	_applog "${msg}"

	! printf '%s\n' "${@}" | grep -qsxiF 'debug' || \
		Debug="y"
	! printf '%s\n' "${@}" | grep -qsxiF 'xtrace' || \
		Debug="xtrace"
	set +o xtrace
	devNull="/dev/null"
	if [ "${Debug}" = "xtrace" ]; then
		export PS4='+\t ${LINENO}:${FUNCNAME:+"${FUNCNAME}:"} '
		exec {BASH_XTRACEFD}>> "${LOG}.xtrace"
		set -o xtrace
		devNull="${LOG}.xtrace"
	fi

	BackupRotate
	RuleClean
	RuleClean "" "${CLIENTCONNECT}.*"

	unset $(set | awk -F '=' \
		'$1 ~ /^(adapter|config)[[:digit:]]*_/ {print $1}') 2>> "${devNull}" || :
	ind=0
	while read -r line; do
		case "${ind}" in
		0)
			data="$(sed -nr \
			-e '/Info:[ ]+DVB:[ =]+Card ([[:digit:]]+) - Tuner ([[:digit:]]+) [=]+/{
			s//\1 \2/;p;q}' \
			-e '${q1}' <<< "${line}")" || \
				continue
			let "adapter=Adapters+1,1"
			card=${data%% *}
			tuner=${data##* }
			eval adapter${adapter}_card='${card}'
			eval adapter${adapter}_tuner='${tuner}'
			[ ${tuner} -eq 0 ] || \
				for item in demux dvr net; do
					[ -e "/dev/dvb/adapter${card}/${item}${tuner}" ] || \
						ln -s "${item}0" "/dev/dvb/adapter${card}/${item}${tuner}"
				done
			let "ind++,1"
			;;
		1)
			if data="$(sed -nr \
			-e '/Info:  DVB:   Frontend : ([[:alnum:]]+)/{s//\1/;p;q}' \
			-e '${q1}' <<< "${line}")"; then
				name="$(_trim "${data}")"
				if [ "${name}" = "Sony CXD2837ER DVB-T/T2/C demodulator" \
				-a ${tuner} -eq 1 ]; then
					Blacklist="${Blacklist} ${card}:0"
				fi
				if grep -qswF "${card}:${tuner}" <<< "${Blacklist}"; then
					_applog "Info: Not using blacklisted ${dvbtype} card ${card}:${tuner} \"${name}\""
					ind=0
					continue
				fi
				eval adapter${adapter}_name='${name}'
				let "ind++,1"
			else
				ind=0
			fi
			;;
		2)
			if data="$(sed -nr \
			-e '/Info:  DVB:[[:blank:]]+([^[:blank:]].*)/{s//\1/;p;q}' \
			-e '${q1}' <<< "${line}")"; then
				case "$(_trim "${data}")" in
				Terrestrial*) dvbtype="dvbt" ;;
				Satellite*) dvbtype="dvbs" ;;
				Cable*) dvbtype="dvbc" ;;
				ATSC*) dvbtype="atsc" ;;
				*) ind=0; continue ;;
				esac
				eval adapter${adapter}_dvbtype='${dvbtype}'
				let "ind++,1"
			else
				ind=0
			fi
			;;
		3)
			if data="$(sed -nr \
			-e '/Info:  DVB:   Frequency: ([[:digit:]]+) kHz to ([[:digit:]]+) kHz/{s//\1 \2/;p;q}' \
			-e '${q1}' <<< "${line}")"; then
				eval adapter${adapter}_freqmin='${data%% *}'
				eval adapter${adapter}_freqmax='${data##* }'
				let "Adapters++,1"
				_applog "Info: Detected ${dvbtype} card ${card}:${tuner} \"${name}\""
				printf '%s' "${adapterTypes}" | \
				grep -qswF "${dvbtype}" || \
					adapterTypes="${adapterTypes}${dvbtype} "
			fi
			ind=0
			;;
		esac
	done < <(/usr/bin/mumudvb --list-cards 2>&1)

	for dvbtype in ${adapterTypes}; do
		while read -r conffile; do
			let "Configs++,1"
			eval config${Configs}_conffile='${conffile}'
			eval config${Configs}_dvbtype='${dvbtype}'

			name=""
			service_id=""
			while read -r line; do
				case "${line}" in
				freq=*) eval config${Configs}_freq='${line##*=}' ;;
				name=*) name="${line##*=}" ;;
				service_id=*) service_id="${line##*=}" ;;
				*)
					[ -n "${name}" -a -n "${service_id}" ] || \
						continue
					eval config${Configs}_service_${service_id}='${name}'
					name=""
					service_id=""
					;;
				esac
			done < "${conffile}"
			[ -z "${name}" -o -z "${service_id}" ] || \
				eval config${Configs}_service_${service_id}='${name}'
			RuleInsert $((PortHttp+Configs))
		done < <(ls -1 /etc/mumudvb/${dvbtype}_*.conf 2>> "${devNull}")
	done

	reloadConfig=""
	ListStatus &
}

ClientsDiff() {
	local clientsA="${1}" \
		clientsB="${2}"
	test -n "${clientsA}" && \
		grep -svxF "${clientsB:-0}" <<< "${clientsA}"
}

ServerName() {
	echo "mumudvb server ${dvbtype} ${portHttp}:${card}:${tuner}"
}

GetPlaylist() {
	# global servername clientIP unit playlist stuck
	local c=5 \
		msg
	: > "${playlist}"
	stuck=""
	while systemctl --quiet is-active "${unit}" && \
	[ ! -s "${playlist}" ]; do
		sleep 2
		if ! wget --quiet -O "${playlist}" \
		"http://$(hostname):${portHttp}/playlist.m3u" || \
		[ $(wc -l < "${playlist}") -le 1 ]; then
			: > "${playlist}"
			! let "c--" || \
				continue
			[ -z "${stuck}" ] || \
				return ${ERR}
			stuck="y"
			systemctl --quiet restart "${unit}"
			msg="Warn: ${servername} is stuck. Restarting it"
			_applog "${msg}"
			[ -z "${ExitPoints}" ] || \
				((OnStartFail "${msg}" "${clientIP}") &)
			c=5
			sleep 2
		fi
	done
	systemctl --quiet is-active "${unit}" && \
	[ -s "${playlist}" ] || \
		return ${ERR}
	stuck=""
	msg="Info: ${servername} is available"
	_applog "${msg}"
	[ -z "${ExitPoints}" ] || \
		((OnAvail "${msg}" "${clientIP}") &)
	if ! grep -qsF ":${portHttp}/bysid/" "playlist.m3u"; then
		[ -z "${Debug}" ] || \
			_applog "Info: adding playlist \"${playlist}\"" \
				"to \"playlist.m3u\""
		[ -s "playlist.m3u" ] && \
			tail -n +2 "${playlist}" >> "playlist.m3u" || \
			cp -f "${playlist}" "playlist.m3u"
	fi
}

SetWatchdog() {
	set +o xtrace
	c=${IdleTimeout}
	while systemctl --quiet is-active "${unit}" && \
	let "c--"; do
		sleep 1
	done && \
		echo "${SERVEREND}" >> "${pipe}"
}

StopWatchdog() {
	[ -n "${pidWatchdog}" ] || \
		return ${OK}
	kill -s TERM ${pidWatchdog} 2>> "${devNull}" || :
	wait ${pidWatchdog} 2>> "${devNull}" || :
	pidWatchdog=""
}

WatchConnections() {
	# global unit portHttp pidJournal pidWatchdog pipe clients
	local line client connections msg msg1
	if connections="$(Traffic ${portHttp})"; then
		echo "CONNECTED" >> "${pipe}"
		pidWatchdog=""
	else
		SetWatchdog &
		pidWatchdog=${!}
	fi
	while systemctl --quiet is-active "${unit}"; do
		read -r line < "${pipe}" || \
			continue
		[ "${line}" != "${SERVEREND}" ] || \
			return ${OK}
		if connections="$(Traffic ${portHttp})"; then
			StopWatchdog
			[ "${clients}" != "${connections}" ] || \
				continue
			msg="Info: ${servername}"
			msg1="${msg}"
			_applog "${msg}"
			if client="$(ClientsDiff "${clients}" "${connections}")"; then
				msg="Close:\"$(Hostnames ${client})\""
				msg1="${msg1},${LF}${msg}"
				_applog "${msg}"
			fi
			if client="$(ClientsDiff "${connections}" "${clients}")"; then
				msg="Open:\"$(Hostnames ${client})\""
				msg1="${msg1},${LF}${msg}"
				_applog "${msg}"
			fi
			msg="Clients:\"$(Hostnames ${connections})\""
			msg1="${msg1},${LF}${msg}"
			_applog "${msg}"
			[ -z "${ExitPoints}" ] || \
				((OnConnection "${msg1}" \
					$(printf '%s\n' ${connections} ${clients} | \
					cut -f 1 -d ':' | sort -u)) &)
			clients="${connections}"
		elif [ -n "${clients}" ]; then
			msg="Info: ${servername} All closed:\"$(Hostnames ${clients})\""
			_applog "${msg}"
			[ -z "${ExitPoints}" ] || \
				((OnConnection "${msg}" \
					$(printf '%s\n' ${clients} | \
					cut -f 1 -d ':' | sort -u)) &)
			clients=""
			SetWatchdog &
			pidWatchdog=${!}
		fi
	done
}

StartServer() {
	# global config portHttp card tuner dvbtype clientIP
	local conffile tmpconf log_file playlist \
		pidJournal pidWatchdog pipe pids \
		clients="" unit stuck servername msg

	servername="$(ServerName)"
	RuleClean ${portHttp}
	eval conffile=\"\${config${config}_conffile:-}\"
	tmpconf="${portHttp}-${card}-${tuner}-$(basename "${conffile}")"
	playlist="$(basename --suffix ".conf" "${conffile}").m3u"
	log_file="$(basename --suffix ".conf" "${tmpconf}").log"
	sed -re "/^port_http=.*/s//port_http=${portHttp}/" \
		-e "/^card=.*/s//card=${card}/" \
		-e "/^tuner=.*/s//tuner=${tuner}/" \
		< "${conffile}" > "${tmpconf}"

	: > "${log_file}"
	unit="${NAME}-${portHttp}.service"
	if systemctl list-unit-files --all "${unit}" >> "${devNull}" 2>&1; then
		systemctl --quiet reset-failed "${unit}" 2>> "${devNull}" || :
	fi
	pipe="${portHttp}-pipe"
	CreateEmptyPipe "${pipe}"
	chown _mumudvb:video "${log_file}"
	if systemd-run --quiet \
	--working-directory="${Workdir}" \
	--unit="${unit}" \
	--uid=_mumudvb \
	--gid=video \
	--property="StandardOutput=append:${Workdir}${log_file}" \
	--property="StandardError=append:${Workdir}${log_file}" \
	--property="ExecStopPost=/bin/bash -c 'echo ${SERVEREND} >> ${pipe}'" \
	--property="KillMode=mixed" \
	--property="KillSignal=INT" \
	--property="TimeoutStopSec=10s" \
	/usr/bin/mumudvb ${Debug:+"-v"} -d -c "${tmpconf}"; then
		msg="Info: starting ${servername}"
		_applog "${msg}"
		[ -z "${Debug}" ] || \
			[ -z "${ExitPoints}" ] || \
				((OnStart "${msg}" "${clientIP}") &)
	fi
	sleep 2
	if systemctl --quiet is-active "${unit}"; then
		[ -z "${Debug}" ] || \
			_applog "Info: ${servername} is running"
		if GetPlaylist; then
			CreateEmptyPipe "${pipe}"
			(while :; do
				journalctl --since="@$(_UTCseconds)" \
				--follow "--grep=${CLIENTCONNECT}${portHttp}" --output=cat  | \
				cat - >> "${pipe}" || :
			done) &
			pidJournal=${!}
			RuleInsertClient ${portHttp}
			WatchConnections
			RuleClean ${portHttp} "${CLIENTCONNECT}${portHttp}"
			StopWatchdog
			pids="${pidJournal} $(_ps_children ${pidJournal})"
			kill -s TERM ${pids} 2>> "${devNull}" || :
			wait ${pids} 2>> "${devNull}" || :
		fi
		if systemctl --quiet is-active "${unit}"; then
			_msg "Info: ${servername} is" \
				"$(test -n "${stuck}" && echo "stuck" || echo "idle")." \
				"Stopping it"
			systemctl --quiet stop "${unit}" || :
		else
			msg="Info: ${servername} has stopped himself"
		fi
		_applog "${msg}"
		[ -z "${ExitPoints}" ] || \
			((OnStop "${msg}" \
				$(printf '%s\n' ${clientIP} ${clients} | \
				cut -f 1 -d ':' | sort -u)) &)
		sleep 2
	else
		msg="Err: ${servername} doesn't run"
		_applog "${msg}"
		[ -z "${ExitPoints}" ] || \
			((OnStartFail "${msg}" \
				$(printf '%s\n' ${clientIP} ${clients} | \
				cut -f 1 -d ':' | sort -u)) &)
	fi
	systemctl --quiet reset-failed "${unit}" 2>> "${devNull}" || :
	echo "${SERVEREND}${portHttp}" >> "${PIPE}"
}

SelectAdapter() {
	# global config portHttp card tuner dvbtype clientIP
	local freq freqmax freqmin adapter msg
	eval freq=\"\${config${config}_freq:-}\"
	while read -r adapter; do
		eval card=\"\${adapter${adapter}_card:-}\"
		eval tuner=\"\${adapter${adapter}_tuner:-}\"
		if _lsof "/dev/dvb/adapter${card}/demux${tuner}" >> "${devNull}" || \
		printf '%s' "${Servers}" | \
		awk -v card="${card}" -v tuner="${tuner}" \
		'BEGIN{RS=" "; FS=":"}
		$2 == card && $3 == tuner {rc=-1; exit}
		END{exit rc+1}'; then
			[ -z "${Debug}" ] || \
				_applog "Info: ${portHttp} can't get" \
					"adapter${card}/frontend${tuner}" \
					"already in use"
			continue
		fi
		eval freqmin=\"\${adapter${adapter}_freqmin:-}\"
		eval freqmax=\"\${adapter${adapter}_freqmax:-}\"
		[ ${freqmin} -gt ${freq} -o  ${freq} -gt ${freqmax} ] || {
			_msg "Info: ${portHttp} selects" \
				"adapter${card}/frontend${tuner}"
			_applog "${msg}"
			[ -z "${Debug}" ] || \
				[ -z "${ExitPoints}" ] || \
					((OnSelect "${msg}" "${clientIP}") &)
			return ${OK}
		}
		[ -z "${Debug}" ] || \
			_applog "Info: ${portHttp} frequency ${freq} out of range" \
				"adapter${card}/frontend${tuner}"
	done < <(set | \
	sed -nre "/^adapter([[:digit:]]+)_dvbtype=${dvbtype}/s//\1/p")

	msg="Warn: ${portHttp} no more ${dvbtype} cards available"
	_applog "${msg}"
	[ -z "${ExitPoints}" ] || \
		((OnNoCardAvail "${msg}" "${clientIP}") &)
	return ${ERR}
}

_exit() {
	trap - EXIT INT
	set +o errexit +o nounset -o pipefail +o noglob
	if [ -n "${Servers}" ]; then
		for portHttp in $(printf '%s' "${Servers}" | \
		awk 'BEGIN{RS=" "; FS=":"};{print $1}'); do
			systemctl --quiet stop "${NAME}-${portHttp}.service" || :
		done
		sleep 1
	fi
	RuleClean
	RuleClean "" "${CLIENTCONNECT}.*"
	pids="$(_ps_children)"
	[ -z "${pids}" ] || \
		kill -s TERM ${pids} 2>> "${devNull}" || :
	wait 2>> "${devNull}" || :
	_applog "Daemon exit"
}

Main() {
	# internal variables, daemon scope
	local reloadConfig line portHttp config card tuner dvbtype clientIP \
		clients msg msg1 devNull

	trap '_exit' EXIT
	trap 'exit' INT

	[ ! -s "/usr/lib/${NAME}/exit-points.sh" ] || {
		. "/usr/lib/${NAME}/exit-points.sh"
		ExitPoints="y"
	}

	LoadConfig "${@}" || \
		exit ${ERR}

	trap '[ -n "${reloadConfig}" ] || echo "${RELOAD}" >> "${PIPE}"' "${IRELOAD}"
	trap 'echo "ListStatus" >> "${PIPE}"' "${ISTAT}"

	(while :; do
		journalctl --since="@$(_UTCseconds)" \
		--follow "--grep=${NEWREQUEST}" --output=cat | \
		cat - >> "${PIPE}" || :
	done) &

	while :; do
		read -r line < "${PIPE}" || {
			_applog "Warn: can't read from pipe"
			continue
		}
		if portHttp="$(sed -nr \
		-e "/.*${NEWREQUEST}.*DPT=([[:digit:]]+)[^[:digit:]].*/{s//\1/;p;q}" \
		-e '${q1}' <<< "${line}")"; then
			if printf '%s' "${Servers}" | \
			awk -v portHttp="${portHttp}" \
			'BEGIN{RS=" "; FS=":"}
			$1 == portHttp {rc=-1; exit}
			END{exit rc+1}' || \
			Traffic ${portHttp} >> "${devNull}"; then
				[ -z "${Debug}" ] || \
					_applog "Warn: received new request" \
						"for already active port ${portHttp}"
				continue
			fi
			clientIP="$(sed -nr \
				-e "/.*SRC=([[:digit:].]+)[^[:digit:].].*/{s//\1/;p;q}" \
				<<< "${line}")"
			let "config=portHttp-PortHttp,1"
			eval dvbtype=\"\${config${config}_dvbtype:-}\"
			msg="Info: $(Hostnames ${clientIP}) requests port ${portHttp}"
			_applog "${msg}"
			[ -z "${ExitPoints}" ] || \
				((OnRequest "${msg}" "${clientIP}") &)
			SelectAdapter || \
				continue
			Servers="${Servers}${portHttp}:${card}:${tuner} "
			StartServer &
			ListStatus &
		elif portHttp="$(sed -nr \
		-e "/^${SERVEREND}([[:digit:]]+)$/{s//\1/;p;q}" \
		-e '${q1}' <<< "${line}")"; then
			Servers="$(printf '%s' "${Servers}" | \
				awk -v portHttp="${portHttp}" \
				'BEGIN{RS=" "; FS=":"}
				$1 != portHttp {printf $0 " "}')"
			RuleInsert ${portHttp}
			if [ -z "${Servers}" -a -n "${reloadConfig}" ]; then
				LoadConfig "${@}" || \
					exit ${ERR}
				_applog "Info: configuration reloaded"
			else
				ListStatus &
			fi
		elif [ "${line}" = "${RELOAD}" ]; then
			if [ -n "${Servers}" ]; then
				_applog "Warn: deferring configuration reload." \
					"Active servers: ${Servers}"
				reloadConfig="y"
			else
				LoadConfig "${@}" || \
					exit ${ERR}
			fi
		elif [ "${line%% *}" = "ListStatus" ]; then
			ListStatus &
			clientIP="${line##* }"
			if [ -z "${Servers}" ]; then
				msg="Status: no servers active"
				_applog "${msg}"
				[ -z "${ExitPoints}" ] || \
					((OnStatus "${msg}" "${clientIP}") &)
				continue
			fi
			while IFS=":" read portHttp card tuner; do
				eval dvbtype=\"\${config$((portHttp-PortHttp))_dvbtype:-}\"
				msg="Status: $(ServerName) is active"
				msg1="${msg}"
				_applog "${msg}"
				if clients="$(Traffic ${portHttp})"; then
					msg="clients: $(Hostnames ${clients})"
					msg1="${msg1},${LF}${msg}"
				else
					msg="no clients connected"
					msg1="${msg1},${LF}${msg}"
				fi
				_applog "${msg}"
				[ -z "${ExitPoints}" ] || \
					((OnStatus "${msg1}" "${clientIP}") &)
			done < <(printf '%s' "${Servers}" | \
				tr -s ' ' '\n')
		else
			[ -z "${Debug}" ] || \
				_applog "Warn: received invalid data from pipe" \
					"\"${line}\""
		fi
	done
}

# constants
NAME="$(basename "${0}")"
readonly NAME \
	STAT="status.txt" \
	PIPE="pipe" \
	LOG="log.txt" \
	IRELOAD="HUP" ISTAT="USR2" \
	OK=0 ERR=1 LF=$'\n' TAB=$'\t' NONE=0 \
	NEWREQUEST="${NAME}New:" \
	SERVEREND="ServerEnd:" \
	CLIENTCONNECT="CliConnect:"
	RELOAD="reloadConfig"
# config variables
declare Workdir Debug PortHttp LogRotate IdleTimeout Blacklist
# Main Global variables
declare Adapters Configs Servers="" ExitPoints=""

case "${1:-}" in
start)
	shift
	Main "${@}"
	;;
status)
	if ! systemctl --quiet is-active dvbondemand.service; then
		echo "Err: Service not active" >&2
		exit ${ERR}
	fi
	Workdir="/run/${NAME}/"
	[ ! -s "/etc/default/${NAME}" ] || \
		. "/etc/default/${NAME}"
	cd "${Workdir}"
	d="$(_UTCseconds -r "${STAT}")"
	echo "Info: Updating status file" >&2
	if [ -z "${SSH_CLIENT:-}" ]; then
		clientIP="$(hostname -I)"
		clientIP="${clientIP%% *}"
	else
		clientIP="${SSH_CLIENT%% *}"
	fi
	echo "ListStatus ${clientIP}" >> "${PIPE}"
	c=5
	while sleep 1;
	[ $(_UTCseconds -r "${STAT}") -eq ${d} ] && \
	let "c--"; do
		:
	done
	if [ ${c} -le 0 ]; then
		echo "Err: Error when updating status file" >&2
		exit ${ERR}
	fi
	cat "${STAT}"
	;;
*)
	echo "Err: Wrong arguments" >&2
	exit ${ERR}
	;;
esac
