#!/bin/bash

#  dvbondemand
#
#  Gets audio/video services from several dvb cards.
#  Starts mumudvb servers on client's request.
#  Stops these servers when idle.
#
#  dvbondemand detects when a service is required and therefore
#  starts mumudvb sessions using an available dvb adapter.
#  In few seconds clients will get the corresponding http video/audio stream.
#  Also, ends the mumudvb server session after client disconnection.
#
#  $Revision: 1.11 $
#
#  Copyright (C) 2023-2023 Jordi Pujol <jordipujolp AT gmail DOT com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3, or (at your option)
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#************************************************************************

_trim() {
	printf '%s\n' "${@}" | \
	sed -re "/^[[:blank:]]+|[[:blank:]]+$/s///g"
}

_ps_children() {
	local ppid=${1:-${$}} \
		excl="${2:-"0"}" \
		pid
	for pid in $(pgrep -P ${ppid} | \
	grep -svwEe "${excl}"); do
		_ps_children ${pid} "${excl}"
		pidsChildren="${pidsChildren}${pid}${TAB}"
	done
}

_UTCseconds() {
	date +'%s' "${@}"
}

_datetime() {
	date +'%F %T' "${@}"
}

_msg() {
	msg="${@}"
}

_applog() {
	local msg="${@}"
	printf '%s\n' "$(_datetime) ${msg}" >> "${LOG}"
}

PreBackupRotate() {
	local f d=$(_UTCseconds)
	for f in "${LOG}" "${LOG}.xtrace"; do
		[ ! -f "${f}" ] || \
			mv -f "${f}" "${f}_${d}"
	done
}

BackupRotate() {
	local f t
	find . -maxdepth 1 \
	-name "${LOG}_*" | \
	sort | \
	head -qn -${LogRotate} | \
	while IFS="_" read -r f t; do
		rm -f "${LOG}_${t}" "${LOG}.xtrace_${t}"
	done
}

Traffic() {
	local portHttp=${1}
	ss --no-header --numeric --tcp state established sport ${portHttp} | \
		grep -qswF ${portHttp}
}

RuleInsert() {
	local portHttp="${1}" \
		config conffile
	[ -z "${Debug}" ] || \
		! Traffic ${portHttp} || \
			_applog "Warn: will set watch on port ${portHttp}" \
				"when server is already active"
	iptables -4 --wait -I INPUT -p tcp -m tcp \
		--dport ${portHttp} -m state --state NEW \
		-m limit --limit 20/min \
		-j LOG --log-level info --log-prefix "${NEWREQUEST}${portHttp}"
	let "config=portHttp-PortHttp,1"
	eval conffile=\"\${config${config}_conffile:-}\"
	_applog "Info: watching port ${portHttp} for \"${conffile}\""
}

RuleClean() {
	local portHttp="${1:-}" \
		rule n d="y"
	until [ -z "${d}" ]; do
		d=""
		n=1
		while rule="$(iptables -4 --wait --list INPUT ${n})" && \
		[ -n "${rule}" ]; do
			if grep -qs \
			-e "LOG level info prefix \"${NEWREQUEST}${portHttp:-".*"}\"" \
			<<< "${rule}"; then
				iptables -4 --wait --delete INPUT ${n}
				_applog "Info: removing watch on port ${portHttp}"
				d="y"
			else
				let "n++,1"
			fi
		done
	done
}

ListStatus() {
	set | sed -nre "/\(\)[[:blank:]]*$/d" \
		-e '/^(adapter|config)[[:digit:]]*_/p' \
		-e '/^[[:upper:]][[:lower:]]/p' \
		> "${STAT}"
}

LoadConfig() {
	local name data conffile line ind \
		card tuner dvbtype item service_id \
		msg="Loading configuration"

	mkdir -p -m 0755 "/run/mumudvb"
	chown -R _mumudvb:video "/run/mumudvb"

	reloadConfig="y"
	# config variables, default values
	Workdir="/run/${NAME}/"
	Debug=""
	PortHttp=4000
	LogRotate=3
	IdleTimeout=60
	Blacklist=""

	[ ! -s "/etc/default/${NAME}" ] || \
		. "/etc/default/${NAME}"

	let "IdleTimeout+=IdleTimeout%2,1"
	[ "${Workdir: -1}" = '/' ] || \
		Workdir="${Workdir}/"
	mkdir -p "${Workdir}"
	cd "${Workdir}"
	rm -f *.{conf,m3u} {0..9}* "${STAT}" 2> /dev/null
	[ -e "${PIPE}" ] || \
		mkfifo "${PIPE}"

	AdapterTypes=""
	Adapters=${NONE}
	Configs=${NONE}
	PreBackupRotate
	exec >> "${LOG}" 2>&1
	_applog "${msg}"

	! printf '%s\n' "${@}" | grep -qsxiF 'debug' || \
		Debug="y"
	! printf '%s\n' "${@}" | grep -qsxiF 'xtrace' || \
		Debug="xtrace"
	set +o xtrace
	if [ "${Debug}" = "xtrace" ]; then
		export PS4='+\t ${LINENO}:${FUNCNAME:+"${FUNCNAME}:"} '
		exec {BASH_XTRACEFD}>> "${LOG}.xtrace"
		set -o xtrace
	fi

	BackupRotate
	RuleClean

	unset $(set | awk -F '=' \
		'$1 ~ /^(adapter|config)[[:digit:]]*_/ {print $1}') 2> /dev/null || :
	ind=0
	while read -r line; do
		case "${ind}" in
		0)
			data="$(sed -nr \
			-e '/Info:[ ]+DVB:[ =]+Card ([[:digit:]]+) - Tuner ([[:digit:]]+) [=]+/{
			s//\1 \2/;p;q}' \
			-e '${q1}' <<< "${line}")" && \
			! grep -qswF "${data/ /:}" <<< "${Blacklist}" || \
				continue
			let "adapter=Adapters+1,1"
			card=${data%% *}
			tuner=${data##* }
			eval adapter${adapter}_card='${card}'
			eval adapter${adapter}_tuner='${tuner}'
			[ ${tuner} -eq 0 ] || \
				for item in demux dvr net; do
					[ -e "/dev/dvb/adapter${card}/${item}${tuner}" ] || \
						ln -s "${item}0" "/dev/dvb/adapter${card}/${item}${tuner}"
				done
			let "ind++,1"
			;;
		1)
			if data="$(sed -nr \
			-e '/Info:  DVB:   Frontend : ([[:alnum:]]+)/{s//\1/;p;q}' \
			-e '${q1}' <<< "${line}")"; then
				name="$(_trim "${data}")"
				if [ "${name}" = "Sony CXD2837ER DVB-T/T2/C demodulator" \
				-a ${tuner} -eq 1 ]; then
					Blacklist="${Blacklist} ${card}:0"
				fi
				eval adapter${adapter}_name='${name}'
				let "ind++,1"
			else
				ind=0
			fi
			;;
		2)
			if data="$(sed -nr \
			-e '/Info:  DVB:[[:blank:]]+([^[:blank:]].*)/{s//\1/;p;q}' \
			-e '${q1}' <<< "${line}")"; then
				case "$(_trim "${data}")" in
				Terrestrial*) dvbtype="dvbt" ;;
				Satellite*) dvbtype="dvbs" ;;
				Cable*) dvbtype="dvbc" ;;
				ATSC*) dvbtype="atsc" ;;
				*) ind=0; continue ;;
				esac
				eval adapter${adapter}_dvbtype='${dvbtype}'
				let "ind++,1"
			else
				ind=0
			fi
			;;
		3)
			if data="$(sed -nr \
			-e '/Info:  DVB:   Frequency: ([[:digit:]]+) kHz to ([[:digit:]]+) kHz/{s//\1 \2/;p;q}' \
			-e '${q1}' <<< "${line}")"; then
				eval adapter${adapter}_freqmin='${data%% *}'
				eval adapter${adapter}_freqmax='${data##* }'
				let "Adapters++,1"
				_applog "Info: Detected ${dvbtype} card ${card}:${tuner} \"${name}\""
				printf '%s' "${AdapterTypes}" | \
				grep -qswF "${dvbtype}" || \
					AdapterTypes="${AdapterTypes}${dvbtype} "
			fi
			ind=0
			;;
		esac
	done < <(/usr/bin/mumudvb --list-cards 2>&1)

	for dvbtype in ${AdapterTypes}; do
		while read -r conffile; do
			let "Configs++,1"
			eval config${Configs}_conffile='${conffile}'
			eval config${Configs}_dvbtype='${dvbtype}'

			name=""
			service_id=""
			while read -r line; do
				case "${line}" in
				freq=*) eval config${Configs}_freq='${line##*=}' ;;
				name=*) name="${line##*=}" ;;
				service_id=*) service_id="${line##*=}" ;;
				*)
					[ -n "${name}" -a -n "${service_id}" ] || \
						continue
					eval config${Configs}_service_${service_id}='${name}'
					name=""
					service_id=""
					;;
				esac
			done < "${conffile}"
			[ -z "${name}" -o -z "${service_id}" ] || \
				eval config${Configs}_service_${service_id}='${name}'
			RuleInsert $((PortHttp+Configs))
		done < <(ls -1 /etc/mumudvb/${dvbtype}_*.conf 2> /dev/null)
	done

	reloadConfig=""
	ListStatus
}

StartServer() {
	# global config portHttp card tuner dvbtype
	local conffile tmpconf filename_pid log_file c pid playlist \
		msgSrv="mumudvb server ${dvbtype} ${portHttp}:${card}:${tuner}" \
		msg

	RuleClean ${portHttp}
	eval conffile=\"\${config${config}_conffile:-}\"
	tmpconf="${portHttp}-$(basename "${conffile}")"
	playlist="$(basename --suffix ".conf" "${conffile}").m3u"
	filename_pid="${portHttp}.pid"
	log_file="$(basename --suffix ".conf" "${tmpconf}").log"
	: > "${playlist}"
	: > "${filename_pid}"
	: > "${log_file}"
	chown _mumudvb:video "${filename_pid}" "${log_file}"
	sed -re "/^port_http=.*/s//port_http=${portHttp}/" \
		-e "/^card=.*/s//card=${card}/" \
		-e "/^tuner=.*/s//tuner=${tuner}/" \
		-e "/^filename_pid=.*/s||filename_pid=${filename_pid}|" \
		-e "/^log_file=.*/s||log_file=${log_file}|" \
		< "${conffile}" > "${tmpconf}"
	grep -qse "^filename_pid=" < "${tmpconf}" || \
		sed -i -e "1ifilename_pid=${filename_pid}" "${tmpconf}"
	grep -qse "^log_file=" < "${tmpconf}" || \
		sed -i -e "1ilog_file=${log_file}" "${tmpconf}"

	/usr/bin/mumudvb ${Debug:+"-v"} -c "${tmpconf}"
	msg="Info: starting ${msgSrv}"
	_applog "${msg}"
	[ -z "${Debug}" ] || \
		[ -z "${ExitPoints}" ] || \
			((OnStart "${msg}") &)
	c=${IdleTimeout}
	pid=""
	while ps -o args --no-headers -C "mumudvb" | \
	grep -qsF "${tmpconf}" && \
	let "c-=2"; do
		sleep 2
		pid="$(cat "${filename_pid}" 2> /dev/null)" && \
		[ -z "${pid}" ] || \
			break
	done
	if [ -n "${pid}" ]; then
		[ -z "${Debug}" ] || \
			_applog "Info: ${msgSrv} is running"
		c=${IdleTimeout}
		while kill -s 0 ${pid} 2> /dev/null && \
		let "c-=2"; do
			sleep 2
			if [ ! -s "${playlist}" ]; then
				if wget --quiet -O "${playlist}" \
				"http://$(hostname):${portHttp}/playlist.m3u" && \
				[ $(wc -l < "${playlist}") -gt 1 ]; then
					msg="Info: ${msgSrv} is available"
					_applog "${msg}"
					[ -z "${ExitPoints}" ] || \
						((OnAvail "${msg}") &)
					if ! grep -qsF ":${portHttp}/bysid/" "playlist.m3u"; then
						[ -z "${Debug}" ] || \
							_applog "Info: adding playlist \"${playlist}\"" \
								"to \"playlist.m3u\""
						[ -s "playlist.m3u" ] && \
							tail -n +2 "${playlist}" >> "playlist.m3u" || \
							cp -f "${playlist}" "playlist.m3u"
					fi
				else
					: > "${playlist}"
				fi
			fi
			! Traffic ${portHttp} || \
				c=${IdleTimeout}
		done
		if kill -s 0 ${pid} 2> /dev/null; then
			msg="Info: ${msgSrv} is idle. Stopping it"
			kill -s TERM ${pid} 2> /dev/null || :
		else
			msg="Info: ${msgSrv} has stopped himself"
		fi
		_applog "${msg}"
		[ -z "${ExitPoints}" ] || \
			((OnStop "${msg}") &)
	else
		if pid=$(ps -o pid,args --no-headers -C "mumudvb" | \
		grep -sF "${tmpconf}" | \
		awk '{print $1}'); then
			msg="Err: ${msgSrv} is stuck"
			kill -s TERM ${pid} 2> /dev/null || :
		else
			msg="Err: ${msgSrv} doesn't run"
		fi
		_applog "${msg}"
		[ -z "${ExitPoints}" ] || \
			((OnStartFail "${msg}") &)
	fi
	sleep 2
	[ -z "${pid}" ] || \
		! kill -s 0 ${pid} 2> /dev/null || {
			[ -z "${Debug}" ] || \
				_applog "Err: ${msgSrv} forced stopping"
			kill -s KILL ${pid} 2> /dev/null || :
			sleep 2
		}
	rm -f "${filename_pid}"
	RuleInsert ${portHttp}
	echo "${SERVEREND}${portHttp}" >> "${PIPE}"
}

SelectAdapter() {
	# global config portHttp card tuner dvbtype
	local freq freqmax freqmin pid adapter msg
	eval freq=\"\${config${config}_freq:-}\"
	while read -r adapter; do
		eval card=\"\${adapter${adapter}_card:-}\"
		eval tuner=\"\${adapter${adapter}_tuner:-}\"
		if printf '%s' "${Servers}" | \
		awk -v card="${card}" -v tuner="${tuner}" \
		'BEGIN{RS=" "; FS=":"}
		$2 == card && $3 == tuner {rc=-1; exit}
		END{exit rc+1}' || \
		pid="$(lsof -wt \
		"$(readlink -f "/dev/dvb/adapter${card}/demux${tuner}")")"; then
			[ -z "${Debug}" ] || \
				_applog "Info: ${portHttp} can't use" \
					"adapter${card}/frontend${tuner}"
			continue
		fi
		eval freqmin=\"\${adapter${adapter}_freqmin:-}\"
		eval freqmax=\"\${adapter${adapter}_freqmax:-}\"
		[ ${freqmin} -gt ${freq} -o  ${freq} -gt ${freqmax} ] || {
			_msg "Info: ${portHttp} selects" \
				"adapter${card}/frontend${tuner}"
			_applog "${msg}"
			[ -z "${Debug}" ] || \
				[ -z "${ExitPoints}" ] || \
					((OnSelect "${msg}") &)
			return ${OK}
		}
		[ -z "${Debug}" ] || \
			_applog "Info: ${portHttp} frequency ${freq} out of range" \
				"adapter${card}/frontend${tuner}"
	done < <(set | \
	sed -nre "/^adapter([[:digit:]]+)_dvbtype=${dvbtype}/s//\1/p")

	msg="Warn: ${portHttp} no more ${dvbtype} cards available"
	_applog "${msg}"
	[ -z "${ExitPoints}" ] || \
		((OnNoCardAvail "${msg}") &)
	return ${ERR}
}

_exit() {
	trap - EXIT INT
	set +o errexit +o nounset -o pipefail +o noglob
	_applog "Daemon exit"
	printf '%s\n\n' "Daemon exit" >&2
	RuleClean
	pidsChildren="$(cat *.pid 2> /dev/null)"; _ps_children
	[ -z "${pidsChildren}" ] || \
		kill -s TERM ${pidsChildren} 2> /dev/null || :
	wait || :
}

Main() {
	# internal variables, daemon scope
	local Adapters Configs Servers="" AdapterTypes \
		reloadConfig line portHttp config card tuner dvbtype clientIP

	trap '_exit' EXIT
	trap 'exit' INT

	LoadConfig || \
		exit 1

	ExitPoints=""
	[ ! -s "/usr/lib/${NAME}/exit-points.sh" ] || {
		. "/usr/lib/${NAME}/exit-points.sh"
		ExitPoints="y"
	}

	trap '[ -n "${reloadConfig}" ] || echo "${RELOAD}" >> "${PIPE}"' "${IRELOAD}"
	trap 'echo "ListStatus" >> "${PIPE}"' "${ISTAT}"

	( journalctl --since="@$(_UTCseconds)" \
		--follow "--grep=${NEWREQUEST}" --output=cat | \
		cat - > "${PIPE}" ) &

	while :; do
		if read -r line < "${PIPE}"; then
			if portHttp="$(sed -nr \
			-e "/.*${NEWREQUEST}.*DPT=([[:digit:]]+)[^[:digit:]].*/{s//\1/;p;q}" \
			-e '${q1}' <<< "${line}")"; then
				if printf '%s' "${Servers}" | \
				awk -v portHttp="${portHttp}" \
				'BEGIN{RS=" "; FS=":"}
				$1 == portHttp {rc=-1; exit}
				END{exit rc+1}' || \
				Traffic ${portHttp}; then
					[ -z "${Debug}" ] || \
						_applog "Warn: received new request" \
							"for already active port ${portHttp}"
					continue
				fi
				let "config=portHttp-PortHttp,1"
				clientIP="$(sed -nr \
					-e "/.*${NEWREQUEST}.*SRC=([[:digit:].]+)[^[:digit:].].*/{s//\1/;p;q}" \
					<<< "${line}")"
				eval dvbtype=\"\${config${config}_dvbtype:-}\"
				msg="Info: client ${clientIP} requests port ${portHttp}"
				_applog "${msg}"
				[ -z "${ExitPoints}" ] || \
					((OnRequest "${msg}") &)
				SelectAdapter || \
					continue
				Servers="${Servers}${portHttp}:${card}:${tuner} "
				StartServer &
				ListStatus
			elif portHttp="$(sed -nr \
			-e "/^${SERVEREND}([[:digit:]]+)$/{s//\1/;p;q}" \
			-e '${q1}' <<< "${line}")"; then
				Servers="$(printf '%s' "${Servers}" | \
					awk -v portHttp="${portHttp}" \
					'BEGIN{RS=" "; FS=":"}
					$1 != portHttp {printf $0 " "}')"
				if [ -z "${Servers}" -a -n "${reloadConfig}" ]; then
					LoadConfig || \
						exit 1
					_applog "Info: configuration reloaded," \
						"now there are no active servers"
				else
					ListStatus
				fi
			elif [ "${line}" = "${RELOAD}" ]; then
				if [ -n "${Servers}" ]; then
					_applog "Warn: active servers: ${Servers}," \
						"deferring configuration reload"
					reloadConfig="y"
				else
					LoadConfig || \
						exit 1
				fi
			elif [ "${line}" = "ListStatus" ]; then
				ListStatus
				if [ -n "${Servers}" ]; then
					printf '%s' "${Servers}" | \
					tr -s ' ' '\n' | \
					while IFS=":" read portHttp card tuner; do
						eval dvbtype=\"\${config$((portHttp-PortHttp))_dvbtype:-}\"
						_msg "Status:" \
							"mumudvb server ${dvbtype} ${portHttp}:${card}:${tuner}" \
							"is active"
						_applog "${msg}"
						[ -z "${ExitPoints}" ] || \
							((OnStatus "${msg}") &)
					done
				else
					msg="Status: no servers active"
					_applog "${msg}"
					[ -z "${ExitPoints}" ] || \
						((OnStatus "${msg}") &)
				fi
			else
				[ -z "${Debug}" ] || \
					_applog "Warn: received invalid data from pipe" \
						"\"${line}\""
			fi
		else
			_applog "Warn: can't read from pipe"
		fi
	done
}

set -o errexit -o nounset -o pipefail +o noglob +o noclobber

# constants
NAME="$(basename "${0}")"
readonly NAME \
	STAT="status.txt" \
	PIPE="pipe" \
	LOG="log.txt" \
	IRELOAD="HUP" ISTAT="USR2" \
	OK=0 ERR=1 TAB=$'\t' NONE=0 \
	NEWREQUEST="${NAME}New:" \
	SERVEREND="ServerEnd:" \
	RELOAD="reloadConfig"
# config variables
declare Workdir Debug PortHttp LogRotate IdleTimeout Blacklist ExitPoints

case "${1:-}" in
start)
	shift
	Main "${@}"
	;;
status)
	if /usr/bin/systemctl --quiet is-active dvbondemand.service; then \
		Workdir="/run/${NAME}/"
		[ ! -s "/etc/default/${NAME}" ] || \
			. "/etc/default/${NAME}"
		cd "${Workdir}"
		d="$(_UTCseconds -r "${STAT}")"
		echo "Info: Updating status file" >&2
		/usr/bin/systemctl kill --kill-who=main --signal=${ISTAT} dvbondemand.service >&2
		c=5
		while sleep 1;
		[ $(_UTCseconds -r "${STAT}") -eq ${d} ] && \
		let "c--"; do
			:
		done
		if [ ${c} -le 0 ]; then
			echo "Err: Error when updating status file" >&2
			exit 1
		fi
		cat "${STAT}"
	else
		echo "Err: Service not active" >&2
		exit 1
	fi
	;;
*)
	echo "Err: Wrong arguments" >&2
	exit 1
	;;
esac
